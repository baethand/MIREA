#include <unordered_map>//----> Непорядковое отображение (коллекция пар: ключ-значение)
#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <set>

using namespace std;


//----> Структура записи - Страховой полис: номер полиса, компания, фамилия владельца
struct InsurancePolicy
{
    unsigned long int number = 0;
    string company;
    string surname;
};


//----> Структура записи в хеш-таблице
struct HashTableEntry
{
    unsigned long int key;
    int hash;
};


//----> Номер полиса, состоящий из 8 чисел
unsigned long int Randomizer()
{
    unsigned long int min = 10000000;
    unsigned long int max = 99999999;
    return min + rand() % (max - min + 1);
}


//----> Хеш-функция методом деления
int HashFun(unsigned long int key, int tableSize)
{
    return key % tableSize;
}


//----> Вставка ключа в таблицу
void Insert(unordered_map<int, list<HashTableEntry>>& hashTable, unsigned long int key, int tableSize)
{
    HashTableEntry entry;
    entry.key = key;
    entry.hash = HashFun(key, tableSize);
    hashTable[entry.hash].push_back(entry);
}


//----> Удаление ключа из таблицы
void Remove(unordered_map<int, list<HashTableEntry>>& hashTable, unsigned long int key, int tableSize)
{
    int hash = HashFun(key, tableSize);
    auto& entries = hashTable[hash];

    for (auto it = entries.begin(); it != entries.end(); )
    {
        if (it->key == key)
        {
            it = entries.erase(it);//----> Увеличение итератора после удаления элемента
        }
        else
        {
            ++it;//----> Переход к следующему элементу в списке
        }
    }
}


//----> Поиск ключа в таблице
bool Find(const unordered_map<int, list<HashTableEntry>>& hashTable, unsigned long int key, int tableSize)
{
    int hash = HashFun(key, tableSize);

    //----> Проверка существования хэш
    auto it = hashTable.find(hash);
    if (it != hashTable.end()) {
        //----> Получение ссылкы на список (цепь записей)
        auto& entries = it->second;
        for (const HashTableEntry& entry : entries)
        {
            if (entry.key == key)
            {
                return true;//----> Ключ найден
            }
        }
    }
    return false;//----> Ключ не найден
}


//----> Рехеширование таблицы
void Rehash(unordered_map<int, list<HashTableEntry>>& hashTable, int newTableSize)
{
    unordered_map<int, list<HashTableEntry>> newHashTable(newTableSize);
    for (const auto& entry : hashTable)//----> Проход по всем элементам хеш-таблицы
    {
        for (const HashTableEntry& hashEntry : entry.second)//----> Проход по всем записям хеша
        {
            int newHash = HashFun(hashEntry.key, newTableSize);
            newHashTable[newHash].push_back(hashEntry);
        }
    }
    hashTable = newHashTable;
}


//----> Определение простого числа
bool IsPrime(int n)
{
    if (n <= 1)
    {
        return false;
    }
    if (n <= 3)
    {
        return true;
    }
    if (n % 2 == 0 || n % 3 == 0)
    {
        return false;
    }
    for (int i = 5; i * i <= n; i += 6)
    {
        if (n % i == 0 || n % (i + 2) == 0)
        {
            return false;
        }
    }
    return true;
}


int CalculateSize(int currentSize)
{
    //----> Умножение текущего размера на некоторый множитель
    int newSize = currentSize * 2;

    //----> Проверка на простое число, чтобы уменьшить вероятность коллизий
    while (!IsPrime(newSize))
    {
        newSize++;
    }
    return newSize;
}


void Output(unordered_map<int, list<HashTableEntry>>& hashTable)
{
    //----> Вывод списка хеш-кода и ключа
    cout << endl << "После изменения" << endl;
    for (const auto& entry : hashTable)
    {
        int hash = entry.first;//----> Получение хеш-кода
        const list<HashTableEntry>& entries = entry.second;//----> Получение списка записей
        for (const HashTableEntry& hashEntry : entries)
        {
            unsigned long int key = hashEntry.key;//----> Получение ключа
            printf("   Ключ: %d   Хеш: %d\n", key, hash);
        }
    }
}


int main()
{
    //----> ЗАДАНИЕ 3.2

    setlocale(LC_ALL, "ru");
    srand(static_cast<unsigned int>(time(nullptr)));//----> Инициализация генератора

    ofstream textFile("textFile.txt");//----> Текстовый файл
    if (!textFile)
    {
        cout << "Текстовый файл не удалось открыть для записи +_+" << endl;
        return 1;
    }
    cout << "Текстовый файл успешно открыт для записи ^_^" << endl << endl;

    //----> Открываем файл для записи в бинарном режиме (флаг - ios::binary)
    ofstream binaryFileOut("binaryFile.bin", ios::binary);//----> Бинарный файл
    if (!binaryFileOut)
    {
        cerr << "Бинарный файл не удалось открыть для записи +_+" << endl;
        return 1;
    }
    cout << "Бинарный файл успешно открыт для записи ^_^" << endl << endl;

    int quant = 14;//----> Количество записей
    set<int> unique;

    InsurancePolicy policy;
    for (int i = 0; i < quant; ++i)
    {
        do {
            policy.number = Randomizer();
        } while (unique.count(policy.number) > 0);
        unique.insert(policy.number);
        policy.company = "Компания_" + to_string(i);
        policy.surname = "Фамилия_" + to_string(i);

        textFile << policy.number << ' ' << policy.company << ' ' << policy.surname << '\n';

        binaryFileOut.write(reinterpret_cast<const char*>(&policy), sizeof(policy));
    }
    cout << "Генерация текстового и бинарного файла завершена ^_^" << endl;

    size_t bytes = sizeof(InsurancePolicy);
    cout << "Размер записи в байтах: " << bytes << endl;
    cout << "Количество записей: " << quant << endl << endl;

    textFile.close();
    binaryFileOut.close();

    int tableSize = 7;//----> Размер хеш-таблицы
    unordered_map<int, list<HashTableEntry>> hashTable;//----> Создание хеш-таблицы с цепочками

    //----> Добавляем элементы в хеш-таблицу
    ifstream binaryFileIn("binaryFile.bin", ios::binary);
    if (!binaryFileIn)
    {
        cout << "Бинарный файл не удалось открыть для чтения +_+" << endl;
        return 1;
    }
    cout << "Бинарный файл успешно открыт для чтения ^_^" << endl << endl;

    cout << "   Проверка хеш-индексов >.<" << endl << endl;
    while (binaryFileIn.read(reinterpret_cast<char*>(&policy), sizeof(policy)))
    {
        //----> Создание записи для хеш-таблицы
        HashTableEntry entry;
        entry.key = policy.number;
        entry.hash = HashFun(entry.key, tableSize);//----> Вычисление хеш-кода для ключа

        hashTable[entry.hash].push_back(entry);//----> Добавление записи в цепочку хеш-таблицы

        printf("   Ключ: %d   Хеш: %d\n", entry.key, entry.hash);
    }

    binaryFileIn.close();

    //----> Фактор заполнения
    double loadFactor = static_cast<double>(hashTable.size()) / tableSize;
    if (loadFactor > 0.8)
    {
        int newTableSize = CalculateSize(tableSize);//----> Определение нового размера таблицы
        tableSize = newTableSize;
        Rehash(hashTable, tableSize);
    }

    bool flag = true;
    while (flag)
    {
        int choice;
        cout << endl << "Выберите действие со структурой: " << endl << "   1 - вставка ключа" << endl << "   2 - поиск ключа" << endl << "   3 - удаление ключа" << endl << "   4 - выход из тестирования" << endl;
        cin >> choice;
        switch (choice)
        {
        case 1:
            unsigned long int insert;
            cout << "Введите номер полиса, который вы желаете добавить (8 чисел) ---> ";
            cin >> insert;
            Insert(hashTable, insert, tableSize);
            loadFactor = static_cast<double>(hashTable.size()) / tableSize;
            if (loadFactor > 0.8)
            {
                int newTableSize = CalculateSize(tableSize);//----> Определение нового размера таблицы
                tableSize = newTableSize;
                Rehash(hashTable, newTableSize);
            }
            Output(hashTable);
            break;
        case 2:
            unsigned long int found;
            cout << "Введите номер полиса, который вы желаете найти (8 чисел) ---> ";
            cin >> found;
            if (Find(hashTable, found, tableSize))
                cout << "Страховой полис найден ^o^" << endl;
            else
                cout << "Страховой полис не найден U_U" << endl;
            break;
        case 3:
            unsigned long int remove;
            cout << "Введите номер полиса, который вы желаете удалить (8 чисел) ---> ";
            cin >> remove;
            Remove(hashTable, remove, tableSize);
            Output(hashTable);
            break;
        case 4:
            flag = false;
            break;
        default:
            break;
        }
    }
    return 0;
}